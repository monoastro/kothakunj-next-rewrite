{"ast":null,"code":"import React,{createContext,useContext,useState}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const ThemeContext=/*#__PURE__*/createContext();export const useTheme=()=>{return useContext(ThemeContext);};export const ThemeProvider=_ref=>{let{children}=_ref;const[theme,setTheme]=useState('light');// Default theme is 'light'\nconst toggleTheme=()=>{setTheme(prevTheme=>prevTheme==='light'?'dark':'light');};const value={theme,toggleTheme};return/*#__PURE__*/_jsx(ThemeContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","jsx","_jsx","ThemeContext","useTheme","ThemeProvider","_ref","children","theme","setTheme","toggleTheme","prevTheme","value","Provider"],"sources":["/home/ash_/Downloads/KothaKunj/FrontEnd/src/ThemeContext.js"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\n\nconst ThemeContext = createContext();\n\nexport const useTheme = () => {\n  return useContext(ThemeContext);\n};\n\nexport const ThemeProvider = ({ children }) => {\n  const [theme, setTheme] = useState('light'); // Default theme is 'light'\n\n  const toggleTheme = () => {\n    setTheme((prevTheme) => (prevTheme === 'light' ? 'dark' : 'light'));\n  };\n\n  const value = {\n    theme,\n    toggleTheme,\n  };\n\n  return <ThemeContext.Provider value={value}>{children}</ThemeContext.Provider>;\n};\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,QAAQ,KAAQ,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAEnE,KAAM,CAAAC,YAAY,cAAGL,aAAa,CAAC,CAAC,CAEpC,MAAO,MAAM,CAAAM,QAAQ,CAAGA,CAAA,GAAM,CAC5B,MAAO,CAAAL,UAAU,CAACI,YAAY,CAAC,CACjC,CAAC,CAED,MAAO,MAAM,CAAAE,aAAa,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACxC,KAAM,CAACE,KAAK,CAAEC,QAAQ,CAAC,CAAGT,QAAQ,CAAC,OAAO,CAAC,CAAE;AAE7C,KAAM,CAAAU,WAAW,CAAGA,CAAA,GAAM,CACxBD,QAAQ,CAAEE,SAAS,EAAMA,SAAS,GAAK,OAAO,CAAG,MAAM,CAAG,OAAQ,CAAC,CACrE,CAAC,CAED,KAAM,CAAAC,KAAK,CAAG,CACZJ,KAAK,CACLE,WACF,CAAC,CAED,mBAAOR,IAAA,CAACC,YAAY,CAACU,QAAQ,EAACD,KAAK,CAAEA,KAAM,CAAAL,QAAA,CAAEA,QAAQ,CAAwB,CAAC,CAChF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}